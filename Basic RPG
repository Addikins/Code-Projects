using System;
using System.Collections.Generic;
using System.Linq;

public class Hero
    {
        public int Health { get; set; }
        public int Armor { get; set; }
        public int Attack { get; set; }
        public int Exp { get; set; }
        public int Level { get; set; }
    }
    public class Enemy
    {
        public int Health { get; set; }
        public int Armor { get; set; }
        public int Attack { get; set; }
        public int Exp { get; set; }
    }
public class GetMethods
{
    public static string GetYesNo()
    {
        String receivedResponse = Console.ReadLine();
        if (string.Equals(receivedResponse, "yes", StringComparison.CurrentCultureIgnoreCase) || string.Equals(receivedResponse, "y", StringComparison.CurrentCultureIgnoreCase))
        {
            return "y";
        }
        else if (string.Equals(receivedResponse, "no", StringComparison.CurrentCultureIgnoreCase) || string.Equals(receivedResponse, "n", StringComparison.CurrentCultureIgnoreCase))
        {
            return "n";
        }
        else
        {
            Console.WriteLine("I don't understand, please tell me yes or no.");
            return "error";
        }
    }
    public static int GetNumber()
    {
        bool correctInput = true;
        int returnedNumber;
        do
        {
            string receivedNumber = Console.ReadLine();
            correctInput = int.TryParse(receivedNumber, out returnedNumber);
            if (!correctInput)
            {
                Console.WriteLine("Incorrect Input");
            }

        } while (!correctInput);
        return returnedNumber;
    }
    public static int GetHeroClass()
    {
        String receivedResponse = Console.ReadLine();
        if (string.Equals(receivedResponse, "tank", StringComparison.CurrentCultureIgnoreCase) || string.Equals(receivedResponse, "1", StringComparison.CurrentCultureIgnoreCase))
        {
            Console.WriteLine("You chose the Tank!");
            return 1;
        }
        else if (string.Equals(receivedResponse, "barbarian", StringComparison.CurrentCultureIgnoreCase) || string.Equals(receivedResponse, "2", StringComparison.CurrentCultureIgnoreCase))
        {
            Console.WriteLine("You chose the Barbarian!");
            return 2;
        }
        else if (string.Equals(receivedResponse, "rouge", StringComparison.CurrentCultureIgnoreCase) || string.Equals(receivedResponse, "3", StringComparison.CurrentCultureIgnoreCase))
        {
            Console.WriteLine("You chose the Rouge!");
            return 3;
        }
        else if (string.Equals(receivedResponse, "knight", StringComparison.CurrentCultureIgnoreCase) || string.Equals(receivedResponse, "4", StringComparison.CurrentCultureIgnoreCase))
        {
            Console.WriteLine("You chose the Knight!");
            return 4;
        }
        else
        {
            Console.WriteLine("Incorrect input, please choose a class!");
            return 5;
        }
    }
}

public class Game //Main Game Mode
{
    string hname = "NA"; //Hero's name
    string Classname = "NA"; //Hero's adventure class
    int StartingAttack = 0; //Constant starting attack of the hero
    int StartingArmor = 0; //Constant starting armor of the hero
    int StartingHP = 0; //Constant starting HP of the hero
    int heroAttackChance; //Chance of hero attack connecting
    int enemyAttackChance; //Chance of enemy attack connecting
    Random random = new Random(); //Random int for chance events
    string turnChoice; //The user input for choosing the turn action
    int heroclass; //Int that assigns the hero's adventure class
    string enemyName; //Current Enemy
    bool RunChance; // Hero escape bool
    int RunSuccess; //Decides if the hero escapes
    bool back = false; //Option for user to go back in menu screen
    int Levelup; //Alerts the user if they level up!
    bool InputSuccess = false;
    Hero hero = new Hero(); //Main field of the Hero Class
    Enemy enemy = new Enemy(); //Main field of the Enemy Class
    public int GetTurnChoice() //Returns the user input for mid-battle selection
    {
        string turnChoice;
        int userChoice = 6;
        do
        {
            Console.WriteLine(String.Format("\n{0} VS {1}\n (1) Attack\n (2) Magic & Skills\n (3) Items\n (4) Hero Status\n (5) Run",hname, enemyName));
            turnChoice = Console.ReadLine();
            Console.WriteLine();
            if (turnChoice == "1" || turnChoice == "2" || turnChoice == "3" || turnChoice == "4" || turnChoice == "5")
            {
                switch (turnChoice)
                {
                    case "1":
                        userChoice = 1;
                        hero.Health = Attack();
                        break;
                    case "2":
                        userChoice = 2;
                        MagicSkills();
                        break;
                    case "3":
                        userChoice = 3;
                        Console.WriteLine(hname + " reached into their pouch....\nBut they're running on empty!");
                        break;
                    case "4":
                        userChoice = 4;
                        TurnResult();
                        break;
                    case "5":
                        userChoice = 5;
                        Run();
                        break;
                }
            }
            else { Console.WriteLine("Incorrect input\n Select from (1) (2) (3) (4) (5)"); userChoice = 6; }
        } while (userChoice == 6);
        return hero.Health;
    }
    public bool Run()
    {
        Console.WriteLine(String.Format("{0} tries to sneak away from the {1}...", hname, enemyName));
        RunSuccess = random.Next(1, 10);
        if (RunSuccess < 5)
        { RunChance = true; Console.WriteLine(String.Format("{0} used a distraction and got away!", hname)); }
        else
        {
            RunChance = false; Console.WriteLine(String.Format("but the {0} got in the way!", enemyName));
            if (enemyAttackChance < 90 && enemy.Health > 0)
            {
                hero.Health += hero.Armor - enemy.Attack;
                Console.WriteLine(String.Format("The {0} dealt {1} damage to {2}", enemyName, enemy.Attack - hero.Armor, hname));
            }
            else if (enemy.Health > 0)
            {
                Console.WriteLine("The " + enemyName + " missed!");
            }
        }
        return RunChance;
    }
    public int Attack()
        {
                if (heroAttackChance < 85 && enemy.Health > 0)
                {
                    enemy.Health += enemy.Armor - hero.Attack;
                    Console.WriteLine(String.Format("{0} dealt {1} damage to the {2}",hname, hero.Attack - enemy.Armor, enemyName));
                }
                else { Console.WriteLine(hname + " missed!"); }
                if (enemyAttackChance < 90 && enemy.Health > 0)
                {
                    hero.Health += hero.Armor - enemy.Attack;
                    Console.WriteLine(String.Format("The {0} dealt {1} damage to {2}",enemyName, enemy.Attack - hero.Armor, hname));
                }
                else if (enemy.Health > 0) { Console.WriteLine("The "+enemyName+" missed!"); }

           if (enemy.Health <= 0) { Console.WriteLine(String.Format("{0} vanquished the evil {1}!\n +{2}Exp!",hname,enemyName, enemy.Exp)); }
            return hero.Health; //returns result of the battle including hp of hero
        }
    public int MagicSkills()
    {
        string turnChoice;
        int userChoice = 4;
        do
        {
            back = false;
            Console.WriteLine("Magic & Skills:\n (1) Examine Enemy\n (2) First Aid\n (3) Dazzle!!!\n (4) Back");
            turnChoice = Console.ReadLine();
            Console.WriteLine();
            if (turnChoice == "1" || turnChoice == "2" || turnChoice == "3" || turnChoice == "4")
            {
                switch (turnChoice)
                {
                    case "1":
                        userChoice = 1;
                        Console.WriteLine(String.Format("{0} peers into the {1}'s soul...\n{1}:\n ({2})HP ({3})Armor ({4})Attack\n", hname, enemyName,enemy.Health,enemy.Armor,enemy.Attack));
                        break;
                    case "2":
                        userChoice = 2;
                        Console.WriteLine(hname + " attempts to bandage their wounds mid-combat...");
                        int healChance = random.Next(1, 10);
                        int addHP;
                        if (healChance < 4) { addHP = 0; Console.WriteLine("But they were busy getting smacked around!"); }
                        else if (healChance < 7) { addHP = 50; hero.Health += addHP; Console.WriteLine(String.Format("And they managed to get a couple bandaids in place.\n +{0}HP!", addHP)); TurnResult(); Console.WriteLine(); }
                        else if (healChance < 10) { addHP = 100; hero.Health += addHP; Console.WriteLine(String.Format("And they patched themselves up nicely!\n +{0}HP!", addHP)); TurnResult(); Console.WriteLine(); }
                        else if (healChance == 10) { addHP = 200; hero.Health += addHP; Console.WriteLine(String.Format("Dr.{0} was successfully able to add 5min to their lifespan!\n +{1}HP!", hname, addHP)); TurnResult(); Console.WriteLine(); }
                        break;
                    case "3":
                        userChoice = 3;
                        Console.WriteLine(String.Format("{0} throws glitter at the {1}!\nIt's not very effective...\nBut some gets in the {1}'s face!\n",hname,enemyName));
                        enemyAttackChance = random.Next(80, 120);
                        break;
                    case "4":
                        userChoice = 4;
                        back = true;
                        break;
                }
            }
            else { Console.WriteLine("Incorrect input\n Select from (1) (2) (3)"); userChoice = 5; }
        } while (userChoice == 5);
        if (back == true) { return hero.Health; }
        else
        {
            if (enemyAttackChance < 90 && enemy.Health > 0)
            {
                hero.Health += hero.Armor - enemy.Attack;
                Console.WriteLine(String.Format("The {0} dealt {1} damage to {2}", enemyName, enemy.Attack - hero.Armor, hname));
            }
            else if (enemy.Health > 0)
            {
                Console.WriteLine("The " + enemyName + " missed!");
                if (userChoice == 3)
                {
                    Console.WriteLine(String.Format("{0} Seizes the opportunity and attacks the {1}!\n", hname, enemyName));
                    if (heroAttackChance < 85 && enemy.Health > 0)
                    {
                        enemy.Health += enemy.Armor - hero.Attack;
                        Console.WriteLine(String.Format("{0} dealt {1} damage to the {2}", hname, hero.Attack - enemy.Armor, enemyName));
                    }
                    else { Console.WriteLine(hname + " missed!"); }
                }
            }
        }
        return hero.Health;
    }
    public int HeroClass() // Sets the name & class the hero chooses
    {
        Console.WriteLine("Hello, let's begin an adventure!\nFirst off, choose a name for your hero!");
        do
        {
            hname = Console.ReadLine();
            int nameLength = hname.Length;
            if (nameLength > 15)
            {
                Console.WriteLine("Your hero name must be 15 characters or less!");
            }
            else if (nameLength < 3)
            {
                Console.WriteLine("Your hero name must be 3 characters or more!");
            }
            else
            {
                Console.WriteLine("\nGreat! Now, choose a class for " + hname + "!");
                InputSuccess = true;
            }
        } while (!InputSuccess);
        do
        {
            Console.WriteLine("\n (1) TANK\n (500)HP   (10)Armor   (15)Attack\n\n (2) BARBARIAN\n (400)HP   (0)Armor   (20)Attack\n\n (3) ROUGE\n (200)HP   (0)Armor   (30)Attack\n\n (4) KNIGHT\n (300)HP   (5)Armor   (15)Attack\n");
            heroclass = GetMethods.GetHeroClass();
            Console.WriteLine();
        } while (heroclass == 5);
        return heroclass; //returns the case # from 1-5
    }
    public string StartTurn()
    {
        int generateNumber;
        int generateEvent;
        HeroClass(); //runs the HeroClass method
        switch (heroclass) //Sets the basic specs for the Hero class
        {
            case 1:
                Classname = "Tank";
                hero.Health = 500;
                hero.Armor = 10;
                hero.Attack = 15;
                StartingAttack = 15;
                StartingArmor = 10;
                StartingHP = 500;
                break;
            case 2:
                Classname = "Barbarian";
                hero.Health = 400;
                hero.Armor = 0;
                hero.Attack = 20;
                StartingAttack = 20;
                StartingArmor = 0;
                StartingHP = 400;
                break;
            case 3:
                Classname = "Rouge";
                hero.Health = 200;
                hero.Armor = 0;
                hero.Attack = 30;
                StartingAttack = 30;
                StartingArmor = 0;
                StartingHP = 200;
                break;
            case 4:
                Classname = "Knight";
                hero.Health = 300;
                hero.Armor = 5;
                hero.Attack = 15;
                StartingAttack = 15;
                StartingArmor = 5;
                StartingHP = 300;
                break;
        }
        Console.WriteLine(String.Format(hname+" the " + Classname + " will start with   ({0})HP   ({1})Armor   ({2})Attack\n", hero.Health, hero.Armor, hero.Attack));
        while (hero.Health > 0)
        {
            Levelup = hero.Level;
            generateNumber = random.Next(0, 100);
            generateEvent = generateNumber > 95 ? 3 : generateNumber > 25 ? 0 : generateNumber > 15 ? 1 : 2;
            switch (generateEvent)
            {
                case 0:
                    hero.Health = Fight();
                    break;
                case 1:
                    hero.Armor = ArmorTreasure();
                    break;
                case 2:
                    hero.Attack = WeaponTreasure();
                    break;
                case 3:
                    hero.Health = HealEvent();
                    break;
                default:
                    Console.Write("Turn Error");
                    break;
            }
            hero.Level = hero.Exp < 300 ? 0 : hero.Exp < 600 ? 1 : hero.Exp < 1000 ? 2 : hero.Exp < 1500 ? 3 : hero.Exp < 2000 ? 4 : hero.Exp < 2500 ? 5 : 6;
            switch (hero.Level)
            {
                case 0:
                    hero.Level = hero.Exp / 100 + 1;
                    break;
                case 1:
                    hero.Level = hero.Exp / 120 + 1;
                    break;
                case 2:
                    hero.Level = hero.Exp / 150 + 1;
                    break;
                case 3:
                    hero.Level = hero.Exp / 200 + 1;
                    break;
                case 4:
                    hero.Level = hero.Exp / 220 + 1;
                    break;
                case 5:
                    hero.Level = hero.Exp / 250 + 1;
                    break;
                case 6:
                    hero.Level = hero.Exp / 300 + 1;
                    break;
            }
            if (hero.Health > 0)
                {
                if (hero.Level > Levelup) { Console.WriteLine("\n"+hname + " leveled up!!!\n"); }
                TurnResult();
                }
        }
        return (hname + " the Level " + hero.Level+" "+Classname+" died!\n");

    }
    public int ArmorTreasure()
    {
        Dictionary<string, int> armor = new Dictionary<string, int>
            {
                {"a Tattered Cloak", 2},
                {"a Fur Pelt", 4},
                {"a Leather Chestpiece", 6},
                {"an Iron Chestplate", 8},
                {"a Reinforced Iron Chestplate", 10},
                {"a Steel Chestplate", 12},
                {"a Reinforced Steel Chestplate", 14},
                {"an Enchanted Steel Chestplate", 16},
                {"a Mythrill Armorset", 20}
            };
        int ArmorNumber = random.Next(0, armor.Count);
        Console.WriteLine(String.Format(hname+" finds {0}...", armor.ElementAt(ArmorNumber).Key,
            armor.ElementAt(ArmorNumber).Value));
        if (armor.ElementAt(ArmorNumber).Value + StartingArmor > hero.Armor)
        {
            hero.Armor += armor.ElementAt(ArmorNumber).Value;
            Console.WriteLine("and decided to equip it!");
        }
        else
        {
            Console.WriteLine("but has better armor...");
        }

        return hero.Armor;
    }

    public int WeaponTreasure()
    {
        Dictionary<string, int> weapon = new Dictionary<string, int>
            {
                {"Dagger", 10},
                {"Short Sword", 12},
                {"Long Sword", 14},
                {"Mace", 16},
                {"Twin Daggers",18},
                {"Broad Sword", 20},
                {"Battle Axe", 22},
                {"Heavy Mace", 24},
                {"Great Sword", 26},
                {"Enchanted Great Sword", 28},
                {"Sword of Evil's Bane", 34 }
            };
        int WeaponNumber = random.Next(0, weapon.Count);
        Console.WriteLine(String.Format(hname+" finds a {0}...", weapon.ElementAt(WeaponNumber).Key,
            weapon.ElementAt(WeaponNumber).Value));
        if (weapon.ElementAt(WeaponNumber).Value + StartingAttack > hero.Attack)
        {
            hero.Attack += weapon.ElementAt(WeaponNumber).Value;
            Console.WriteLine("and decided to equip it!");
        }
        else
        {
            Console.WriteLine("but has a better weapon...");
        }

        return hero.Attack;
    }

    public int HealEvent()
    {
        int additionHealth = 0;
        int healingNumber = random.Next(0, 100);
        int healingpot;
        string PotName = "NA";
        if (healingNumber < 50)
        { healingpot = 1; }
        else if (healingNumber >= 50 && healingNumber < 90)
        { healingpot = 2; }
        else
        { healingpot = 3; }
        switch (healingpot)
        {
            case 1:
                PotName = "Minor Healing Potion";
                additionHealth = 75;
                break;
            case 2:
                PotName = "Medium Healing Potion";
                additionHealth = 150;
                break;
            case 3:
                PotName = "Super Healing Potion";
                additionHealth = 350;
                break;
        }
        Console.WriteLine(String.Format(hname + " finds a {0}", PotName));
        if (StartingHP * 2 > hero.Health)
        {
            Console.WriteLine(String.Format(hname + " used the {0}. +{1}HP", PotName, additionHealth));
            return hero.Health + additionHealth;
        }
        else if (StartingHP *2 <= hero.Health)
                { Console.WriteLine(String.Format(hname + " is too full to drink the {0}. +0HP", PotName)); }
        return hero.Health;
    }

    public int Fight()
    {
        int generateEnemy;
        generateEnemy = 1;
        if (hero.Level < 6)
        {
            generateEnemy = random.Next(0, 100);
            generateEnemy = generateEnemy < 40 ? 0 : generateEnemy < 75 ? 1 : generateEnemy < 95 ? 2 : generateEnemy < 99 ? 3 : 4;
        }
        else if (hero.Level < 13)
        {
            generateEnemy = random.Next(0, 100);
            generateEnemy = generateEnemy < 7 ? 1 : generateEnemy < 14 ? 2 : generateEnemy < 45 ? 3 : generateEnemy < 76 ? 4 : generateEnemy < 96 ? 5 : generateEnemy < 100 ? 5 : 6;
        }
        else
        {
            generateEnemy = random.Next(0, 100);
            generateEnemy = generateEnemy < 5 ? 3 : generateEnemy < 10 ? 4 : generateEnemy < 26 ? 5 : generateEnemy < 51 ? 6 : generateEnemy < 76 ? 7 : 8;
        }
        switch (generateEnemy)
        {
            case 0:
                hero.Health = FightAgainstGoblin();
                break;
            case 1:
                hero.Health = FightAgainstSkeleton();
                break;
            case 2:
                hero.Health = FightAgainstZombie();
                break;
            case 3:
                hero.Health = FightAgainstOrc();
                break;
            case 4:
                hero.Health = FightAgainstTroll();
                break;
            case 5:
                hero.Health = FightAgainstSiren();
                break;
            case 6:
                hero.Health = FightAgainstWarlock();
                break;
            case 7:
                hero.Health = FightAgainstMinotaur();
                break;
            case 8:
                hero.Health = FightAgainstGargoyle();
                break;
        }

        return hero.Health;
    }
    public int FightAgainstGoblin()
    {
        enemyName = "Goblin"; enemy.Health = 75; enemy.Armor = 1; enemy.Attack = 25; enemy.Exp = 25;
        Console.WriteLine(String.Format("A {0} pops out of the grass!",enemyName));
        while (enemy.Health > 0 && hero.Health > 0)
        {
            if (hero.Armor < enemy.Attack)
            {
                heroAttackChance = random.Next(0, 100); //defines the chance of the hero connecting an attack this turn
                enemyAttackChance = random.Next(0, 100); //defines the chance of the enemy connecting an attack this turn
                hero.Health = GetTurnChoice();
                if (RunChance == true)
                { break; }
            }
            else
            {
                enemy.Health = 0;
                Console.WriteLine(String.Format("{0} easily handled the {1}!\n +{2}Exp!",hname,enemyName,enemy.Exp));
                hero.Exp += enemy.Exp;
            }
        }
        if (enemy.Health<=0)
        { hero.Exp += enemy.Exp; }
        return hero.Health;
    }
    public int FightAgainstSkeleton()
    {
        enemyName = "Skeleton"; enemy.Health = 100; enemy.Armor = 2; enemy.Attack = 35; enemy.Exp = 50;
        Console.WriteLine(String.Format("\nA {0} shambles out of the dark...",enemyName));
        while (enemy.Health > 0 && hero.Health > 0)
        {
        if (hero.Armor < enemy.Attack)
        {
                heroAttackChance = random.Next(0, 100); //defines the chance of the hero connecting an attack this turn
                enemyAttackChance = random.Next(0, 100); //defines the chance of the enemy connecting an attack this turn
                hero.Health = GetTurnChoice();
                if (RunChance == true)
                { break; }
            }
        else
            {
                enemy.Health = 0;
                Console.WriteLine(String.Format("{0} easily handled the {1}!\n +{2}Exp!", hname, enemyName, enemy.Exp));
                hero.Exp += enemy.Exp;
            }
        }
        if (enemy.Health <= 0)
        { hero.Exp += enemy.Exp; }
        return hero.Health; //returns result of the battle including hp of hero
    }
    /* if (hero.Armor < enemy.Attack)
            {
                attackChance = random.Next(0, 100); //defines the chance of connecting an attack
                if (attackChance < 85 && enemy.Health > 0)
                {
                    enemy.Health += enemy.Armor - hero.Attack;
                    Console.WriteLine(String.Format(hname + " dealt {0} damage to the {1}", hero.Attack - enemy.Armor, enemyName));
                }
                else { Console.WriteLine(hname + " missed!"); }
                attackChance = random.Next(0, 100);
                if (attackChance < 90 && enemy.Health > 0)
                {
                    hero.Health +=hero.Health + hero.Armor - skeleton.Attack;
                    Console.WriteLine(String.Format("The Skeleton dealt {0} damage to " + hname, skeleton.Attack - hero.Armor));
                }
                else if (skeletonHealth > 0) { Console.WriteLine("The Skeleton missed!"); }
            }
            else
            {
                skeletonHealth = 0;
                Console.WriteLine(hname + " easily handled the Skeleton!");
            } */
    //  if (hero.Health > 0) { Console.WriteLine(String.Format(hname+" vanquished the evil Skeleton! + {0}Exp!", skeleton.Exp)); }

    public int FightAgainstZombie()
    {
        enemyName = "Zombie"; enemy.Health = 300; enemy.Armor = 5; enemy.Attack = 40; enemy.Exp = 75;
        Console.WriteLine(String.Format("\nA {0} lurks towards you!", enemyName));
        while (enemy.Health > 0 && hero.Health > 0)
        {
            if (hero.Armor < enemy.Attack)
            {
                heroAttackChance = random.Next(0, 100); //defines the chance of the hero connecting an attack this turn
                enemyAttackChance = random.Next(0, 100); //defines the chance of the enemy connecting an attack this turn
                hero.Health = GetTurnChoice();
                if (RunChance == true)
                { break; }
            }
            else
            {
                enemy.Health = 0;
                Console.WriteLine(String.Format("{0} easily handled the {1}!\n +{2}Exp!", hname, enemyName, enemy.Exp));
                hero.Exp += enemy.Exp;
            }
        }
        if (enemy.Health <= 0)
        { hero.Exp += enemy.Exp; }
        return hero.Health;
    }
    public int FightAgainstOrc()
    {
        enemyName = "Orc"; enemy.Health = 400; enemy.Armor = 10; enemy.Attack = 70; enemy.Exp = 150;
        Console.WriteLine(String.Format("\nAs {0} walks out of a cave they fall right into an {1} ambush!",hname, enemyName));
        while (enemy.Health > 0 && hero.Health > 0)
        {
            if (hero.Armor < enemy.Attack)
            {
                heroAttackChance = random.Next(0, 100); //defines the chance of the hero connecting an attack this turn
                enemyAttackChance = random.Next(0, 100); //defines the chance of the enemy connecting an attack this turn
                hero.Health = GetTurnChoice();
                if (RunChance == true)
                { break; }
            }
            else
            {
                enemy.Health = 0;
                Console.WriteLine(String.Format("{0} easily handled the {1}!\n +{2}Exp!", hname, enemyName, enemy.Exp));
                hero.Exp += enemy.Exp;
            }
        }
        if (enemy.Health <= 0)
        { hero.Exp += enemy.Exp; }
        return hero.Health;
    }

    public int FightAgainstTroll()
    {
        enemyName = "Troll"; enemy.Health = 200; enemy.Armor = 4; enemy.Attack = 60; enemy.Exp = 175;
        Console.WriteLine(String.Format("\nA {0} attacks {1} from the treetops!", enemyName,hname));
        while (enemy.Health > 0 && hero.Health > 0)
        {
            if (hero.Armor < enemy.Attack)
            {
                heroAttackChance = random.Next(0, 100); //defines the chance of the hero connecting an attack this turn
                enemyAttackChance = random.Next(0, 100); //defines the chance of the enemy connecting an attack this turn
                hero.Health = GetTurnChoice();
                if (RunChance == true)
                { break; }
            }
            else
            {
                enemy.Health = 0;
                Console.WriteLine(String.Format("{0} easily handled the {1}!\n +{2}Exp!", hname, enemyName, enemy.Exp));
                hero.Exp += enemy.Exp;
            }
        }
        if (enemy.Health <= 0)
        { hero.Exp += enemy.Exp; }
        return hero.Health;
    }

    public int FightAgainstSiren()
    {
        enemyName = "Siren"; enemy.Health = 300; enemy.Armor = 5; enemy.Attack = 60; enemy.Exp = 200;
        Console.WriteLine(String.Format("\n{0} is lured by the call of a {1}...", hname, enemyName));
        while (enemy.Health > 0 && hero.Health > 0)
        {
            if (hero.Armor < enemy.Attack)
            {
                heroAttackChance = random.Next(0, 100); //defines the chance of the hero connecting an attack this turn
                enemyAttackChance = random.Next(0, 100); //defines the chance of the enemy connecting an attack this turn
                hero.Health = GetTurnChoice();
                if (RunChance == true)
                { break; }
            }
            else
            {
                enemy.Health = 0;
                Console.WriteLine(String.Format("{0} easily handled the {1}!\n +{2}Exp!", hname, enemyName, enemy.Exp));
                hero.Exp += enemy.Exp;
            }
        }
        if (enemy.Health <= 0)
        { hero.Exp += enemy.Exp; }
        return hero.Health;
    }
    public int FightAgainstWarlock()
    {
        enemyName = "Warlock"; enemy.Health = 250; enemy.Armor = 2; enemy.Attack = 100; enemy.Exp = 250;
        Console.WriteLine(String.Format("\nFrom the ground a cloud of darkness appears.. Suddenly a {0} emerges!", enemyName));
        while (enemy.Health > 0 && hero.Health > 0)
        {
            if (hero.Armor < enemy.Attack)
            {
                heroAttackChance = random.Next(0, 100); //defines the chance of the hero connecting an attack this turn
                enemyAttackChance = random.Next(0, 100); //defines the chance of the enemy connecting an attack this turn
                hero.Health = GetTurnChoice();
                if (RunChance == true)
                { break; }
            }
            else
            {
                enemy.Health = 0;
                Console.WriteLine(String.Format("{0} easily handled the {1}!\n +{2}Exp!", hname, enemyName, enemy.Exp));
                hero.Exp += enemy.Exp;
            }
        }
        if (enemy.Health <= 0)
        { hero.Exp += enemy.Exp; }
        return hero.Health;
    }

    public int FightAgainstMinotaur()
    {
        enemyName = "Minotaur"; enemy.Health = 600; enemy.Armor = 15; enemy.Attack = 80; enemy.Exp = 350;
        Console.WriteLine(String.Format("\nA {0} stampedes toward {1}!", enemyName,hname));
        while (enemy.Health > 0 && hero.Health > 0)
        {
            if (hero.Armor < enemy.Attack)
            {
                heroAttackChance = random.Next(0, 100); //defines the chance of the hero connecting an attack this turn
                enemyAttackChance = random.Next(0, 100); //defines the chance of the enemy connecting an attack this turn
                hero.Health = GetTurnChoice();
                if (RunChance == true)
                { break; }
            }
            else
            {
                enemy.Health = 0;
                Console.WriteLine(String.Format("{0} easily handled the {1}!\n +{2}Exp!", hname, enemyName, enemy.Exp));
                hero.Exp += enemy.Exp;
            }
        }
        if (enemy.Health <= 0)
        { hero.Exp += enemy.Exp; }
        return hero.Health;
    }

    public int FightAgainstGargoyle()
    {
        enemyName = "Gargoyle"; enemy.Health = 550; enemy.Armor = 25; enemy.Attack = 70; enemy.Exp = 400;
        Console.WriteLine(String.Format("\nA dark figure crashes down from the sky... A demonic {0} bares its stone mace!", enemyName));
        while (enemy.Health > 0 && hero.Health > 0)
        {
            if (hero.Armor < enemy.Attack)
            {
                heroAttackChance = random.Next(0, 100); //defines the chance of the hero connecting an attack this turn
                enemyAttackChance = random.Next(0, 100); //defines the chance of the enemy connecting an attack this turn
                hero.Health = GetTurnChoice();
                if (RunChance == true)
                { break; }
            }
            else
            {
                enemy.Health = 0;
                Console.WriteLine(String.Format("{0} easily handled the {1}!\n +{2}Exp!", hname, enemyName, enemy.Exp));
                hero.Exp += enemy.Exp;
            }
        }
        if (enemy.Health <= 0)
        { hero.Exp += enemy.Exp; }
        return hero.Health;
    }
    public void TurnResult()
    {
        Console.WriteLine(String.Format("\nCurrent Status\n {0}: Level({1}) {2}\n ({3})HP   ({4})Armor   ({5})Attack\n",hname, hero.Level, Classname, hero.Health, hero.Armor, hero.Attack));
    }

    class Program
    {
        static void Main(string[] args)
        {
            string answer;
            bool playAgain = true;
            Game game = new Game();
            do
            {
                Console.Write(game.StartTurn());
                do
                {
                   Console.WriteLine("Would you like to begin a new adventure?");
                    answer = GetMethods.GetYesNo();
                    switch (answer)
                    {
                        case "y":
                            Console.WriteLine("You awaken once more...");
                            playAgain = true;
                            break;
                        case "n":
                            Console.WriteLine("Your hero begins their eternal slumber...");
                            playAgain = false;
                            break;
                    }
                } while (answer == "error");
            } while (playAgain == true);
        }
    }
}
